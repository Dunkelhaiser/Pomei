/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router";

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as FeaturesImport } from "./routes/features";
import { Route as ProtectedImport } from "./routes/_protected";
import { Route as NotesIndexImport } from "./routes/notes/index";
import { Route as AuthAuthImport } from "./routes/auth/_auth";
import { Route as ProtectedBinImport } from "./routes/_protected/bin";
import { Route as ProtectedArchiveImport } from "./routes/_protected/archive";
import { Route as ProtectedFoldersIndexImport } from "./routes/_protected/folders/index";
import { Route as ProtectedFoldersFolderIdImport } from "./routes/_protected/folders/$folderId";

// Create Virtual Routes

const AuthImport = createFileRoute("/auth")();
const IndexLazyImport = createFileRoute("/")();
const NotesCreateLazyImport = createFileRoute("/notes/create")();
const NotesNoteIdLazyImport = createFileRoute("/notes/$noteId")();
const ProtectedVerifyLazyImport = createFileRoute("/_protected/verify")();
const ProtectedSettingsLazyImport = createFileRoute("/_protected/settings")();
const AuthAuthSignupLazyImport = createFileRoute("/auth/_auth/sign_up")();
const AuthAuthSigninLazyImport = createFileRoute("/auth/_auth/sign_in")();
const AuthAuthForgotpasswordLazyImport = createFileRoute("/auth/_auth/forgot_password")();
const ProtectedSettingsSecurityLazyImport = createFileRoute("/_protected/settings/security")();
const ProtectedSettingsGeneralLazyImport = createFileRoute("/_protected/settings/general")();
const ProtectedSettingsDangerzoneLazyImport = createFileRoute("/_protected/settings/danger_zone")();
const AuthAuthResetpasswordTokenLazyImport = createFileRoute("/auth/_auth/reset_password/$token")();

// Create/Update Routes

const AuthRoute = AuthImport.update({
    path: "/auth",
    getParentRoute: () => rootRoute,
} as any);

const FeaturesRoute = FeaturesImport.update({
    path: "/features",
    getParentRoute: () => rootRoute,
} as any);

const ProtectedRoute = ProtectedImport.update({
    id: "/_protected",
    getParentRoute: () => rootRoute,
} as any);

const IndexLazyRoute = IndexLazyImport.update({
    path: "/",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/index.lazy").then((d) => d.Route));

const NotesIndexRoute = NotesIndexImport.update({
    path: "/notes/",
    getParentRoute: () => rootRoute,
} as any);

const NotesCreateLazyRoute = NotesCreateLazyImport.update({
    path: "/notes/create",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/notes/create.lazy").then((d) => d.Route));

const NotesNoteIdLazyRoute = NotesNoteIdLazyImport.update({
    path: "/notes/$noteId",
    getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/notes/$noteId.lazy").then((d) => d.Route));

const ProtectedVerifyLazyRoute = ProtectedVerifyLazyImport.update({
    path: "/verify",
    getParentRoute: () => ProtectedRoute,
} as any).lazy(() => import("./routes/_protected/verify.lazy").then((d) => d.Route));

const ProtectedSettingsLazyRoute = ProtectedSettingsLazyImport.update({
    path: "/settings",
    getParentRoute: () => ProtectedRoute,
} as any).lazy(() => import("./routes/_protected/settings.lazy").then((d) => d.Route));

const AuthAuthRoute = AuthAuthImport.update({
    id: "/_auth",
    getParentRoute: () => AuthRoute,
} as any);

const ProtectedBinRoute = ProtectedBinImport.update({
    path: "/bin",
    getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedArchiveRoute = ProtectedArchiveImport.update({
    path: "/archive",
    getParentRoute: () => ProtectedRoute,
} as any);

const ProtectedFoldersIndexRoute = ProtectedFoldersIndexImport.update({
    path: "/folders/",
    getParentRoute: () => ProtectedRoute,
} as any);

const AuthAuthSignupLazyRoute = AuthAuthSignupLazyImport.update({
    path: "/sign_up",
    getParentRoute: () => AuthAuthRoute,
} as any).lazy(() => import("./routes/auth/_auth.sign_up.lazy").then((d) => d.Route));

const AuthAuthSigninLazyRoute = AuthAuthSigninLazyImport.update({
    path: "/sign_in",
    getParentRoute: () => AuthAuthRoute,
} as any).lazy(() => import("./routes/auth/_auth.sign_in.lazy").then((d) => d.Route));

const AuthAuthForgotpasswordLazyRoute = AuthAuthForgotpasswordLazyImport.update({
    path: "/forgot_password",
    getParentRoute: () => AuthAuthRoute,
} as any).lazy(() => import("./routes/auth/_auth.forgot_password.lazy").then((d) => d.Route));

const ProtectedSettingsSecurityLazyRoute = ProtectedSettingsSecurityLazyImport.update({
    path: "/security",
    getParentRoute: () => ProtectedSettingsLazyRoute,
} as any).lazy(() => import("./routes/_protected/settings/security.lazy").then((d) => d.Route));

const ProtectedSettingsGeneralLazyRoute = ProtectedSettingsGeneralLazyImport.update({
    path: "/general",
    getParentRoute: () => ProtectedSettingsLazyRoute,
} as any).lazy(() => import("./routes/_protected/settings/general.lazy").then((d) => d.Route));

const ProtectedSettingsDangerzoneLazyRoute = ProtectedSettingsDangerzoneLazyImport.update({
    path: "/danger_zone",
    getParentRoute: () => ProtectedSettingsLazyRoute,
} as any).lazy(() => import("./routes/_protected/settings/danger_zone.lazy").then((d) => d.Route));

const ProtectedFoldersFolderIdRoute = ProtectedFoldersFolderIdImport.update({
    path: "/folders/$folderId",
    getParentRoute: () => ProtectedRoute,
} as any);

const AuthAuthResetpasswordTokenLazyRoute = AuthAuthResetpasswordTokenLazyImport.update({
    path: "/reset_password/$token",
    getParentRoute: () => AuthAuthRoute,
} as any).lazy(() => import("./routes/auth/_auth.reset_password.$token.lazy").then((d) => d.Route));

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            preLoaderRoute: typeof IndexLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/_protected": {
            preLoaderRoute: typeof ProtectedImport;
            parentRoute: typeof rootRoute;
        };
        "/features": {
            preLoaderRoute: typeof FeaturesImport;
            parentRoute: typeof rootRoute;
        };
        "/_protected/archive": {
            preLoaderRoute: typeof ProtectedArchiveImport;
            parentRoute: typeof ProtectedImport;
        };
        "/_protected/bin": {
            preLoaderRoute: typeof ProtectedBinImport;
            parentRoute: typeof ProtectedImport;
        };
        "/auth": {
            preLoaderRoute: typeof AuthImport;
            parentRoute: typeof rootRoute;
        };
        "/auth/_auth": {
            preLoaderRoute: typeof AuthAuthImport;
            parentRoute: typeof AuthRoute;
        };
        "/_protected/settings": {
            preLoaderRoute: typeof ProtectedSettingsLazyImport;
            parentRoute: typeof ProtectedImport;
        };
        "/_protected/verify": {
            preLoaderRoute: typeof ProtectedVerifyLazyImport;
            parentRoute: typeof ProtectedImport;
        };
        "/notes/$noteId": {
            preLoaderRoute: typeof NotesNoteIdLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/notes/create": {
            preLoaderRoute: typeof NotesCreateLazyImport;
            parentRoute: typeof rootRoute;
        };
        "/notes/": {
            preLoaderRoute: typeof NotesIndexImport;
            parentRoute: typeof rootRoute;
        };
        "/_protected/folders/$folderId": {
            preLoaderRoute: typeof ProtectedFoldersFolderIdImport;
            parentRoute: typeof ProtectedImport;
        };
        "/_protected/settings/danger_zone": {
            preLoaderRoute: typeof ProtectedSettingsDangerzoneLazyImport;
            parentRoute: typeof ProtectedSettingsLazyImport;
        };
        "/_protected/settings/general": {
            preLoaderRoute: typeof ProtectedSettingsGeneralLazyImport;
            parentRoute: typeof ProtectedSettingsLazyImport;
        };
        "/_protected/settings/security": {
            preLoaderRoute: typeof ProtectedSettingsSecurityLazyImport;
            parentRoute: typeof ProtectedSettingsLazyImport;
        };
        "/auth/_auth/forgot_password": {
            preLoaderRoute: typeof AuthAuthForgotpasswordLazyImport;
            parentRoute: typeof AuthAuthImport;
        };
        "/auth/_auth/sign_in": {
            preLoaderRoute: typeof AuthAuthSigninLazyImport;
            parentRoute: typeof AuthAuthImport;
        };
        "/auth/_auth/sign_up": {
            preLoaderRoute: typeof AuthAuthSignupLazyImport;
            parentRoute: typeof AuthAuthImport;
        };
        "/_protected/folders/": {
            preLoaderRoute: typeof ProtectedFoldersIndexImport;
            parentRoute: typeof ProtectedImport;
        };
        "/auth/_auth/reset_password/$token": {
            preLoaderRoute: typeof AuthAuthResetpasswordTokenLazyImport;
            parentRoute: typeof AuthAuthImport;
        };
    }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
    IndexLazyRoute,
    ProtectedRoute.addChildren([
        ProtectedArchiveRoute,
        ProtectedBinRoute,
        ProtectedSettingsLazyRoute.addChildren([
            ProtectedSettingsDangerzoneLazyRoute,
            ProtectedSettingsGeneralLazyRoute,
            ProtectedSettingsSecurityLazyRoute,
        ]),
        ProtectedVerifyLazyRoute,
        ProtectedFoldersFolderIdRoute,
        ProtectedFoldersIndexRoute,
    ]),
    FeaturesRoute,
    AuthRoute.addChildren([
        AuthAuthRoute.addChildren([
            AuthAuthForgotpasswordLazyRoute,
            AuthAuthSigninLazyRoute,
            AuthAuthSignupLazyRoute,
            AuthAuthResetpasswordTokenLazyRoute,
        ]),
    ]),
    NotesNoteIdLazyRoute,
    NotesCreateLazyRoute,
    NotesIndexRoute,
]);

/* prettier-ignore-end */
